T_leaf = "Tleaf",
C_i = "Ci",
PPFD = "Qin"))
aci_data$Tleaf
# 2. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
aci_fit <- fit_aci_response(aci_data[aci_data$Q_2 == 1500 & aci_data$A > 0, ],
varnames = list(A_net = "A",
T_leaf = "Tleaf",
C_i = "Ci",
PPFD = "Qin"))
# 1. define a light grouping factor in data
aci_data$Q_2 <- as.factor((round(aci_data$Qin, digits = 0)))
# 2. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
aci_fit <- fit_aci_response(aci_data[aci_data$Q_2 == 1500 & aci_data$A > 0, ],
varnames = list(A_net = "A",
T_leaf = "Tleaf",
C_i = "Ci",
PPFD = "Qin"))
fit <- fit_aci_response(aci_data[aci_data$Q_2 == 1500, ],
varnames = list(
A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"
)
)
aci_fit <- fit_aci_response(aci_data[aci_data$Q_2 == 1500, ],
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 4. view fitted parameters
aci_fit[[1]]
# 5. view graph
aci_fit[[2]]
# 6. view data with modeled parameters attached
aci_fit[[3]]
### try with option fitTPU == F
aci_fit_noTPU <- fit_aci_response(aci_data[aci_data$Q_2 == 1500, ],
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU == F)
### try with option fitTPU == F
aci_fit_noTPU <- fit_aci_response(aci_data[aci_data$Q_2 == 1500, ],
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
aci_fit_noTPU[[1]]
# 4. view fitted parameters
aci_fit[[1]]
aci_fit_noTPU[[2]]
# 7. compile parameters into dataframe for analysis
aci_fit_pars <- compile_data(aci_fit,
output_type = "dataframe",
list_element = 1
)
# 7. compile parameters into dataframe for analysis
aci_fit_pars <- compile_data(aci_fit,
output_type = "dataframe",
list_element = 1
)
aci_fit_pars
# 3. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 4. view fitted parameters
aci_fit[[1]]
### try with option fitTPU = F
aci_fit_noTPU <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
?fit_aq_response
### aq curve fitting with fit_aq_response
# 1. fit curve (see ?fit_aq_curve for more options)
aq_fit <- fit_aq_response(aq_data,
varnames = list(A_net = "A",
PPFD = "Qin"))
# 2. print model summary
aq_fit[[1]]
aq_data_plot
# 3. print fitted parameters
aq_fit[[2]]
# 4. print graph
aq_fit[[3]]
?photo
### photosynthesis modeling
bake_par <- make_bakepar()
?make_bakepar
constants <- make_constants(use_tealeaves = FALSE)
bake_par
constants
constants <- make_constants(use_tealeaves = FALSE) # define a variety of constants
enviro_par <- make_enviropar(use_tealeaves = FALSE)
enviro_par
enviro_par <- make_enviropar(use_tealeaves = FALSE) # environmental variables
leaf_par <- make_leafpar(use_tealeaves = FALSE)
leaf_par
leaf_par <- make_leafpar(use_tealeaves = FALSE) # leaf constants
photo(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
set_units(c(293.14, 298.15), "K")
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(c(293.14, 298.15), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 298.15, 1), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 308.15, 1), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
## load packages
# install.packages('plantecophys') # older package with similar functionality
# library(plantecophys)
install.packages('photosynthesis')
library(photosynthesis)
library(ggplot2)
## load in data
aci_data <- read.csv('../data/licor/aci_10.06_clean.csv')
aq_data <- read.csv('../data/licor/aq_10.06_clean.csv')
## examine the data
head(aci_data) # view first 6 rows
aci_data_plot <- ggplot(data = aci_data, aes(x = Ci, y = A)) + # make a quick scatterplot
geom_point()
aci_data_plot
head(aq_data) # view first 6 rows
aq_data_plot <- ggplot(data = aq_data, aes(x = Qin, y = A)) + # make a quick scatterplot
geom_point()
aq_data_plot
aci_data_plot
aci_data$Tleaf
### aci curve using function fit_aci_response
# 1. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
aci_data$T_leaf
# 2. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 3. view fitted parameters
aci_fit[[1]]
# 4. view graph
aci_fit[[2]]
# 5. view data with modeled parameters attached
aci_fit[[3]]
# 3. view fitted parameters
aci_parameters <- aci_fit[[1]]
?fit_aci_response
### try with option fitTPU = F
aci_fit_noTPU <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
aci_fit_noTPU[[1]]
aci_fit[[1]]
aci_fit_noTPU[[2]]
### aq curve fitting with fit_aq_response
# 1. fit curve (see ?fit_aq_curve for more options)
aq_fit <- fit_aq_response(aq_data,
varnames = list(A_net = "A",
PPFD = "Qin"))
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
# 4. print graph
aq_fit[[3]]
### photosynthesis modeling
bake_par <- make_bakepar() # creat temperature response parameters
constants <- make_constants(use_tealeaves = FALSE) # define a variety of constants
enviro_par <- make_enviropar(use_tealeaves = FALSE) # environmental variables
leaf_par <- make_leafpar(use_tealeaves = FALSE) # leaf parameters
photo(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE) # one set
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 308.15, 1), "K")
), use_tealeaves = FALSE
)
leaf_par
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
library(LeafArea)
install.packages('LeafArea')
library(LeafArea)
library(dplyr)
imagej_path <- "/Applications/ImageJ.app"
?run.ih
?run.ij
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "~/Applications/ImageJ2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "~/Applications/ImageJ2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "~/Applications/ImageJ 2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "~/Applications/ImageJ.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ 2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ\ 2.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
save.image = T)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1, # set known distance in cm
save.image = T)
## install packages
library(LeafArea)
library(dplyr)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1, # set known distance in cm
save.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 10, # set known distance in cm
save.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 10, # set known distance in cm
save.image = F,
check.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 20, # set known distance in cm
save.image = F,
check.image = F)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = F,
check.image = F)
## install packages
library(LeafArea)
library(dplyr)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = F,
check.image = F)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
## load packages
library(plantecophys)
library(R.utils)
## load functions
sourceDirectory('functions')
## load data
aci_data <- read.csv('../data/example_dinah/Dinah_potato_curves_fullyMerged.csv')
head(aci_data)
colnames(aci_data)
## start visualization, curve fitting, and data frame creation
ids <- levels(as.factor(aci_data$id))
curve_fits <- c()
### plant id1 pre_heatwave
aci_data_id1_pre = subset(aci_data, id == ids[1] & meas.type == 'pre_heatwave')
aci_data_id1_pre[, c(6,9:10)]
#### plot raw data and remove values if needed
plot(Adyn ~ Ci, data = aci_data_id1_pre)
#### fit aci curve
fit_aci_id1_pre = fitaci(varnames = list(ALEAF = 'Adyn', Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
# citransition = 300,
useRd = FALSE,
Tcorrect = FALSE,
# fitTPU = FALSE,
fitmethod = 'bilinear',
data = aci_data_id1_pre)
summary(fit_aci_id1_pre)
coef_id1_pre <- coef(fit_aci_id1_pre)
#### plot
plot(fit_aci_id1_pre)
## load packages
# install.packages('plantecophys') # older package with similar functionality
# library(plantecophys)
install.packages('photosynthesis')
library(photosynthesis)
library(ggplot2)
## load in data
aci_data <- read.csv('../data/licor/aci_10.06_clean.csv')
aq_data <- read.csv('../data/licor/aq_10.06_clean.csv')
## examine the data
head(aci_data) # view first 6 rows
aci_data_plot <- ggplot(data = aci_data, aes(x = Ci, y = A)) + # make a quick scatterplot
geom_point()
head(aq_data) # view first 6 rows
aq_data_plot <- ggplot(data = aq_data, aes(x = Qin, y = A)) + # make a quick scatterplot
geom_point()
aq_data_plot
### aci curve using function fit_aci_response
# 1. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
# 2. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 3. view fitted parameters
aci_parameters <- aci_fit[[1]]
aci_parameters
# 4. view graph
aci_fit[[2]]
# 5. view data with modeled parameters attached
aci_fit[[3]]
### try with option fitTPU = F
aci_fit_noTPU <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
aci_fit_noTPU[[1]]
aci_fit_noTPU[[2]]
### aq curve fitting with fit_aq_response
# 1. fit curve (see ?fit_aq_curve for more options)
aq_fit <- fit_aq_response(aq_data,
varnames = list(A_net = "A",
PPFD = "Qin"))
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
?fit_aq_response
### photosynthesis modeling
bake_par <- make_bakepar() # creat temperature response parameters
bake_par
constants <- make_constants(use_tealeaves = FALSE) # define a variety of constants
enviro_par <- make_enviropar(use_tealeaves = FALSE) # environmental variables
leaf_par <- make_leafpar(use_tealeaves = FALSE) # leaf parameters
photo(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE) # one set
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 308.15, 1), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
?fit_aci_response
