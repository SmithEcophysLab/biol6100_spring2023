## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "~/Applications/ImageJ.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ 2.app"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ\ 2.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1 # set known distance in cm
save.image = T)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path, set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1, # set known distance in cm
save.image = T)
## install packages
library(LeafArea)
library(dplyr)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 421.0107, # set known pixel distance
known.distance = 1, # set known distance in cm
save.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 10, # set known distance in cm
save.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 10, # set known distance in cm
save.image = F,
check.image = T)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 1166.496, # set known pixel distance
known.distance = 20, # set known distance in cm
save.image = F,
check.image = F)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = F,
check.image = F)
## install packages
library(LeafArea)
library(dplyr)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = F,
check.image = F)
leaf_area
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
## load packages
library(plantecophys)
library(R.utils)
## load functions
sourceDirectory('functions')
## load data
aci_data <- read.csv('../data/example_dinah/Dinah_potato_curves_fullyMerged.csv')
head(aci_data)
colnames(aci_data)
## start visualization, curve fitting, and data frame creation
ids <- levels(as.factor(aci_data$id))
curve_fits <- c()
### plant id1 pre_heatwave
aci_data_id1_pre = subset(aci_data, id == ids[1] & meas.type == 'pre_heatwave')
aci_data_id1_pre[, c(6,9:10)]
#### plot raw data and remove values if needed
plot(Adyn ~ Ci, data = aci_data_id1_pre)
#### fit aci curve
fit_aci_id1_pre = fitaci(varnames = list(ALEAF = 'Adyn', Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
# citransition = 300,
useRd = FALSE,
Tcorrect = FALSE,
# fitTPU = FALSE,
fitmethod = 'bilinear',
data = aci_data_id1_pre)
summary(fit_aci_id1_pre)
coef_id1_pre <- coef(fit_aci_id1_pre)
#### plot
plot(fit_aci_id1_pre)
## load packages
# install.packages('plantecophys') # older package with similar functionality
# library(plantecophys)
install.packages('photosynthesis')
library(photosynthesis)
library(ggplot2)
## load in data
aci_data <- read.csv('../data/licor/aci_10.06_clean.csv')
aq_data <- read.csv('../data/licor/aq_10.06_clean.csv')
## examine the data
head(aci_data) # view first 6 rows
aci_data_plot <- ggplot(data = aci_data, aes(x = Ci, y = A)) + # make a quick scatterplot
geom_point()
head(aq_data) # view first 6 rows
aq_data_plot <- ggplot(data = aq_data, aes(x = Qin, y = A)) + # make a quick scatterplot
geom_point()
aq_data_plot
### aci curve using function fit_aci_response
# 1. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
# 2. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 3. view fitted parameters
aci_parameters <- aci_fit[[1]]
aci_parameters
# 4. view graph
aci_fit[[2]]
# 5. view data with modeled parameters attached
aci_fit[[3]]
### try with option fitTPU = F
aci_fit_noTPU <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
aci_fit_noTPU[[1]]
aci_fit_noTPU[[2]]
### aq curve fitting with fit_aq_response
# 1. fit curve (see ?fit_aq_curve for more options)
aq_fit <- fit_aq_response(aq_data,
varnames = list(A_net = "A",
PPFD = "Qin"))
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
?fit_aq_response
### photosynthesis modeling
bake_par <- make_bakepar() # creat temperature response parameters
bake_par
constants <- make_constants(use_tealeaves = FALSE) # define a variety of constants
enviro_par <- make_enviropar(use_tealeaves = FALSE) # environmental variables
leaf_par <- make_leafpar(use_tealeaves = FALSE) # leaf parameters
photo(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE) # one set
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 308.15, 1), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
?fit_aci_response
## load packages
# install.packages('plantecophys') # older package with similar functionality
# library(plantecophys)
install.packages('photosynthesis')
library(photosynthesis)
library(ggplot2)
## load packages
library(plantecophys)
library(R.utils)
?make_leafpar
?fit_t_response
## load in data
aci_data <- read.csv('../data/licor/aci_10.06_clean.csv')
aq_data <- read.csv('../data/licor/aq_10.06_clean.csv')
## examine the data
head(aci_data) # view first 6 rows
aci_data_plot <- ggplot(data = aci_data, aes(x = Ci, y = A)) + # make a quick scatterplot
geom_point()
head(aq_data) # view first 6 rows
aq_data_plot <- ggplot(data = aq_data, aes(x = Qin, y = A)) + # make a quick scatterplot
geom_point()
### aci curve using function fit_aci_response
# 1. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
# 2. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 3. view fitted parameters
aci_parameters <- aci_fit[[1]]
# 4. view graph
aci_fit[[2]]
aci_parameters
# 5. view data with modeled parameters attached
aci_fit[[3]]
## load packages
# install.packages('plantecophys') # older package with similar functionality
# library(plantecophys)
install.packages('photosynthesis')
install.packages("photosynthesis")
library(photosynthesis)
library(ggplot2)
## load in data
aci_data <- read.csv('../data/licor/aci_10.06_clean.csv')
aq_data <- read.csv('../data/licor/aq_10.06_clean.csv')
## examine the data
head(aci_data) # view first 6 rows
aci_data_plot <- ggplot(data = aci_data, aes(x = Ci, y = A)) + # make a quick scatterplot
geom_point()
aci_data_plot
head(aq_data) # view first 6 rows
aq_data_plot <- ggplot(data = aq_data, aes(x = Qin, y = A)) + # make a quick scatterplot
geom_point()
aq_data_plot
### aci curve using function fit_aci_response
# 1. convert Tleaf to K
aci_data$T_leaf <- aci_data$Tleaf + 273.15
?fit_aci_response
# 2. fit curve (see ?fit_aci_response for more options)
aci_fit <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"))
# 3. view fitted parameters
aci_parameters <- aci_fit[[1]]
aci_parameters
# 4. view graph
aci_fit[[2]]
# 5. view data with modeled parameters attached
aci_fit[[3]]
### try with option fitTPU = F
aci_fit_noTPU <- fit_aci_response(aci_data,
varnames = list(A_net = "A",
T_leaf = "T_leaf",
C_i = "Ci",
PPFD = "Qin"),
fitTPU = F)
aci_fit_noTPU[[1]]
aci_fit_noTPU[[2]]
aci_parameters
# 4. view graph
aci_fit[[2]]
## load data
aci_data <- read.csv('../data/example_dinah/Dinah_potato_curves_fullyMerged.csv')
head(aci_data)
colnames(aci_data)
## start visualization, curve fitting, and data frame creation
ids <- levels(as.factor(aci_data$id))
curve_fits <- c()
### plant id1 pre_heatwave
aci_data_id1_pre = subset(aci_data, id == ids[1] & meas.type == 'pre_heatwave')
aci_data_id1_pre[, c(6,9:10)]
#### plot raw data and remove values if needed
plot(Adyn ~ Ci, data = aci_data_id1_pre)
#### fit aci curve
fit_aci_id1_pre = fitaci(varnames = list(ALEAF = 'Adyn', Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
# citransition = 300,
useRd = FALSE,
Tcorrect = FALSE,
# fitTPU = FALSE,
fitmethod = 'bilinear',
data = aci_data_id1_pre)
summary(fit_aci_id1_pre)
coef_id1_pre <- coef(fit_aci_id1_pre)
coef_id1_pre
#### plot
plot(fit_aci_id1_pre)
aci_data_id1_pre[1, c(10, 284, 9, 14, 16, 19)]
mean(aci_data_id1_pre[,30])
mean(aci_data_id1_pre[,118])
fit_aci_id1_pre[[2]][1,1]
fit_aci_id1_pre[[2]][1,2]
fit_aci_id1_pre[[2]][2,1]
fit_aci_id1_pre$RMSE
fit_aci_id1_pre$Ci_transition
fit_aci_id1_pre$citransition
fit_aci_id1_pre$Km
fit_aci_id1_pre$GammaStar
#### add to dataframe
aci_data_id1_pre_data <- cbind(aci_data_id1_pre[1, c(10, 284, 9, 14, 16, 19)],
mean(aci_data_id1_pre[,30]),
mean(aci_data_id1_pre[,118]),
fit_aci_id1_pre[[2]][1,1],
fit_aci_id1_pre[[2]][1,2],
fit_aci_id1_pre[[2]][2,1],
fit_aci_id1_pre[[2]][2,2],
fit_aci_id1_pre[[2]][3,1],
fit_aci_id1_pre[[2]][3,2],
# fit_aci_id1_pre[[2]][4,1],
# fit_aci_id1_pre[[2]][4,2],
fit_aci_id1_pre$RMSE,
fit_aci_id1_pre$Ci_transition,
fit_aci_id1_pre$citransition,
fit_aci_id1_pre$Km,
fit_aci_id1_pre$GammaStar,
fit_aci_id1_pre$fitmethod,
fit_aci_id1_pre$Tcorrect,
fit_aci_id1_pre$fitTPU)
colnames(aci_data_id1_pre_data) <- c('id', 'heatwave_time', 'machine', 'anet_420', 'ci_420', 'gs_420',
'vpd_leaf', 'temperature_leaf', 'vcmax_tleaf', 'vcmax_tleaf_se',
'jmax_tleaf', 'jmax_tleaf_se', 'rd_tleaf', 'rd_tleaf_se',
'aci_RMSE', 'aci_ci_transistion', 'aci_ci_transition_set',
'aci_km', 'aci_gammastar', 'aci_fitmethod',
'aci_tcorrect', 'aci_fittpu')
curve_fits <- rbind(curve_fits, aci_data_id1_pre_data)
curve_fits
### plant id1 post_heatwave
aci_data_id1_post = subset(aci_data, id == ids[1] & meas.type == 'post_heatwave')
aci_data_id1_post[, c(6,9:10)]
#### plot raw data and remove values if needed
plot(Adyn ~ Ci, data = aci_data_id1_post)
#### fit aci curve
fit_aci_id1_post = fitaci(varnames = list(ALEAF = 'Adyn', Tleaf = "Tleaf", Ci = "Ci", PPFD = "Qin"),
# citransition = 350,
Tcorrect = FALSE,
fitTPU = FALSE,
fitmethod = 'bilinear',
data = aci_data_id1_post)
summary(fit_aci_id1_post)
coef_id1_post <- coef(fit_aci_id1_post)
#### plot
plot(fit_aci_id1_post)
#### add to dataframe
aci_data_id1_post_data <- cbind(aci_data_id1_post[1, c(10, 284, 9, 14, 16, 19)],
mean(aci_data_id1_post[,30]),
mean(aci_data_id1_post[,118]),
fit_aci_id1_post[[2]][1,1],
fit_aci_id1_post[[2]][1,2],
fit_aci_id1_post[[2]][2,1],
fit_aci_id1_post[[2]][2,2],
fit_aci_id1_post[[2]][3,1],
fit_aci_id1_post[[2]][3,2],
# fit_aci_id1_post[[2]][4,1],
# fit_aci_id1_post[[2]][4,2],
fit_aci_id1_post$RMSE,
fit_aci_id1_post$Ci_transition,
fit_aci_id1_post$citransition,
fit_aci_id1_post$Km,
fit_aci_id1_post$GammaStar,
fit_aci_id1_post$fitmethod,
fit_aci_id1_post$Tcorrect,
fit_aci_id1_post$fitTPU)
colnames(aci_data_id1_post_data) <- c('id', 'heatwave_time', 'machine', 'anet_420', 'ci_420', 'gs_420',
'vpd_leaf', 'temperature_leaf', 'vcmax_tleaf', 'vcmax_tleaf_se',
'jmax_tleaf', 'jmax_tleaf_se', 'rd_tleaf', 'rd_tleaf_se',
'aci_RMSE', 'aci_ci_transistion', 'aci_ci_transition_set',
'aci_km', 'aci_gammastar', 'aci_fitmethod',
'aci_tcorrect', 'aci_fittpu')
curve_fits <- rbind(curve_fits, aci_data_id1_post_data)
curve_fits
### aq curve fitting with fit_aq_response
# 1. fit curve (see ?fit_aq_curve for more options)
aq_fit <- fit_aq_response(aq_data,
varnames = list(A_net = "A",
PPFD = "Qin"))
# 2. print model summary
aq_fit[[1]]
# 3. print fitted parameters
aq_fit[[2]]
# 4. print graph
aq_fit[[3]]
### photosynthesis modeling
bake_par <- make_bakepar() # creat temperature response parameters
constants <- make_constants(use_tealeaves = FALSE) # define a variety of constants
enviro_par <- make_enviropar(use_tealeaves = FALSE) # environmental variables
leaf_par <- make_leafpar(use_tealeaves = FALSE) # leaf parameters
photo(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE) # one set
## if you want to do this over multiple parameter sets
leaf_par <- make_leafpar(
replace = list(
T_leaf = set_units(seq(288.14, 308.15, 1), "K")
), use_tealeaves = FALSE
)
photosynthesis(leaf_par, enviro_par, bake_par, constants,
use_tealeaves = FALSE
)
# 4. view graph
aci_fit[[2]]
## install packages
library(LeafArea)
library(dplyr)
## point to imageJ path on your machine
imagej_path <- "/Applications/ImageJ.app/"
## point to path where your cropped leaf scans are
leafimage_path <- "../data/leaf_area/scans/cropped"
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
install.packages('LeafArea')
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
## install packages
library(LeafArea)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = T,
check.image = F)
?run.ij
## calculate leaf areas
leaf_area <- run.ij(path.imagej = imagej_path,
set.directory = leafimage_path, # set paths
distance.pixel = 423, # set known pixel distance
known.distance = 15, # set known distance in cm
save.image = F,
check.image = F)
